package com.mikep.newday.kata.generator;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * Test suite for {@link DiamondGenerator}
 */
public class DiamondGeneratorTest {
    DiamondGenerator generator;

    @Before
    public void setUp() {
        generator = new DiamondGenerator();
    }

    @Test
    public void testA() {
        final var output = generator.generateOutput('A');
        assertEquals("Expected output to match for character A", "A", output);
    }

    @Test
    public void testB() {
        final var output = generator.generateOutput('B');
        final var expectedOutput = """
                _A_
                B_B
                _A_""";
        assertEquals("Expected output to match for character B", expectedOutput, output);
    }

    @Test
    public void testC() {
        final var output = generator.generateOutput('C');
        final var expectedOutput = """
                __A__
                _B_B_
                C___C
                _B_B_
                __A__""";
        assertEquals("Expected output to match for character C", expectedOutput, output);
    }

    @Test
    public void testZ() {
        final var output = generator.generateOutput('Z');
        final var expectedOutput = """
                     _________________________A_________________________
                     ________________________B_B________________________
                     _______________________C___C_______________________
                     ______________________D_____D______________________
                     _____________________E_______E_____________________
                     ____________________F_________F____________________
                     ___________________G___________G___________________
                     __________________H_____________H__________________
                     _________________I_______________I_________________
                     ________________J_________________J________________
                     _______________K___________________K_______________
                     ______________L_____________________L______________
                     _____________M_______________________M_____________
                     ____________N_________________________N____________
                     ___________O___________________________O___________
                     __________P_____________________________P__________
                     _________Q_______________________________Q_________
                     ________R_________________________________R________
                     _______S___________________________________S_______
                     ______T_____________________________________T______
                     _____U_______________________________________U_____
                     ____V_________________________________________V____
                     ___W___________________________________________W___
                     __X_____________________________________________X__
                     _Y_______________________________________________Y_
                     Z_________________________________________________Z
                     _Y_______________________________________________Y_
                     __X_____________________________________________X__
                     ___W___________________________________________W___
                     ____V_________________________________________V____
                     _____U_______________________________________U_____
                     ______T_____________________________________T______
                     _______S___________________________________S_______
                     ________R_________________________________R________
                     _________Q_______________________________Q_________
                     __________P_____________________________P__________
                     ___________O___________________________O___________
                     ____________N_________________________N____________
                     _____________M_______________________M_____________
                     ______________L_____________________L______________
                     _______________K___________________K_______________
                     ________________J_________________J________________
                     _________________I_______________I_________________
                     __________________H_____________H__________________
                     ___________________G___________G___________________
                     ____________________F_________F____________________
                     _____________________E_______E_____________________
                     ______________________D_____D______________________
                     _______________________C___C_______________________
                     ________________________B_B________________________
                     _________________________A_________________________""";
        assertEquals("Expected output to match for character Z", expectedOutput, output);
    }
}
